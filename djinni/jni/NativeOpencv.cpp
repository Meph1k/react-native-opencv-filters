// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from opencv.djinni

#include "NativeOpencv.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeOpencv::NativeOpencv() : ::djinni::JniInterface<::opencv::Opencv, NativeOpencv>("com/filters/opencv/Opencv$CppProxy") {}

NativeOpencv::~NativeOpencv() = default;


CJNIEXPORT void JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::opencv::Opencv>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::opencv::Opencv::create();
        return ::djinni::release(::djinni_generated::NativeOpencv::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_native_1getCanny(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::opencv::Opencv>(nativeRef);
        auto r = ref->get_canny(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_native_1getThreshold(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::opencv::Opencv>(nativeRef);
        auto r = ref->get_threshold(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_native_1getLines(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::opencv::Opencv>(nativeRef);
        auto r = ref->get_lines(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_native_1getContours(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::opencv::Opencv>(nativeRef);
        auto r = ref->get_contours(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_native_1getSegments(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::opencv::Opencv>(nativeRef);
        auto r = ref->get_segments(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_filters_opencv_Opencv_00024CppProxy_native_1getRoundContours(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_path)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::opencv::Opencv>(nativeRef);
        auto r = ref->get_round_contours(::djinni::String::toCpp(jniEnv, j_path));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
