// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from opencv.djinni

package com.filters.opencv;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Opencv {
    public abstract String getCanny();

    public abstract String getThreshold();

    public abstract String getLines();

    public abstract String getContours();

    public abstract String getSegments();

    public abstract String getRoundContours();

    public static Opencv create()
    {
        return CppProxy.create();
    }

    private static final class CppProxy extends Opencv
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public String getCanny()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCanny(this.nativeRef);
        }
        private native String native_getCanny(long _nativeRef);

        @Override
        public String getThreshold()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getThreshold(this.nativeRef);
        }
        private native String native_getThreshold(long _nativeRef);

        @Override
        public String getLines()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLines(this.nativeRef);
        }
        private native String native_getLines(long _nativeRef);

        @Override
        public String getContours()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getContours(this.nativeRef);
        }
        private native String native_getContours(long _nativeRef);

        @Override
        public String getSegments()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSegments(this.nativeRef);
        }
        private native String native_getSegments(long _nativeRef);

        @Override
        public String getRoundContours()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRoundContours(this.nativeRef);
        }
        private native String native_getRoundContours(long _nativeRef);

        public static native Opencv create();
    }
}
